{
	"id": "8bf88657c791750cc4b661332bef9d1d",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.2",
	"solcLongVersion": "0.8.2+commit.661d1103",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/AconomyFee.sol": {
				"content": "pragma solidity >=0.8.0 <0.9.0;\n// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract AconomyFee is Ownable {\n    uint16 public _AconomyFee;\n    address public AconomyOwnerAddress;\n\n    event SetAconomyFee(uint16 newFee, uint16 oldFee);\n\n    function protocolFee() public view virtual returns (uint16) {\n        return _AconomyFee;\n    }\n\n    function getAconomyOwnerAddress() public view virtual returns (address) {\n        return AconomyOwnerAddress;\n    }\n\n    // Set Aconomy Fee in percent\n    function setProtocolFee(uint16 newFee) public virtual onlyOwner {\n        AconomyOwnerAddress = msg.sender;\n        // Skip if the fee is the same\n        if (newFee == _AconomyFee) return;\n\n        uint16 oldFee = _AconomyFee;\n        _AconomyFee = newFee;\n        emit SetAconomyFee(newFee, oldFee);\n    }\n}\n\n// 0xb45596fCDdf2323A3c50333AF74B7e1077838D88\n// 0xd9145CCE52D386f254917e481eB44e9943F39138\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/AconomyFee.sol": {
				"AconomyFee": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "newFee",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "oldFee",
									"type": "uint16"
								}
							],
							"name": "SetAconomyFee",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "AconomyOwnerAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "_AconomyFee",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAconomyOwnerAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFee",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "newFee",
									"type": "uint16"
								}
							],
							"name": "setProtocolFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/AconomyFee.sol\":119:849  contract AconomyFee is Ownable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_4\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  tag_5\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:965  _msgSender */\n  shl(0x20, tag_6)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_5:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  shl(0x20, tag_7)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  0x20\n  shr\n  jump\t// in\ntag_4:\n    /* \"contracts/AconomyFee.sol\":119:849  contract AconomyFee is Ownable {... */\n  jump(tag_8)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_6:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_7:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup1\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2531  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2550:2558  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2547  _owner */\n  0x00\n  dup1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2604:2612  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2594:2602  oldOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/AconomyFee.sol\":119:849  contract AconomyFee is Ownable {... */\ntag_8:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/AconomyFee.sol\":119:849  contract AconomyFee is Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x9a3d4ae6\n      gt\n      tag_11\n      jumpi\n      dup1\n      0x9a3d4ae6\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xb0e21e8a\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xe4467f35\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_11:\n      dup1\n      0x4dd9ccb1\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x951f9c5b\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/AconomyFee.sol\":385:500  function getAconomyOwnerAddress() public view virtual returns (address) {... */\n    tag_3:\n      tag_12\n      tag_13\n      jump\t// in\n    tag_12:\n      mload(0x40)\n      tag_14\n      swap2\n      swap1\n      tag_15\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_4:\n      tag_16\n      tag_17\n      jump\t// in\n    tag_16:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_5:\n      tag_18\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      tag_15\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/AconomyFee.sol\":187:221  address public AconomyOwnerAddress */\n    tag_6:\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_15\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/AconomyFee.sol\":156:181  uint16 public _AconomyFee */\n    tag_7:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      tag_26\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/AconomyFee.sol\":284:379  function protocolFee() public view virtual returns (uint16) {... */\n    tag_8:\n      tag_28\n      tag_29\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/AconomyFee.sol\":540:847  function setProtocolFee(uint16 newFee) public virtual onlyOwner {... */\n    tag_9:\n      tag_31\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n      tag_34\n      jump\t// in\n    tag_31:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_10:\n      tag_35\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      tag_38\n      jump\t// in\n    tag_35:\n      stop\n        /* \"contracts/AconomyFee.sol\":385:500  function getAconomyOwnerAddress() public view virtual returns (address) {... */\n    tag_13:\n        /* \"contracts/AconomyFee.sol\":448:455  address */\n      0x00\n        /* \"contracts/AconomyFee.sol\":474:493  AconomyOwnerAddress */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/AconomyFee.sol\":467:493  return AconomyOwnerAddress */\n      swap1\n      pop\n        /* \"contracts/AconomyFee.sol\":385:500  function getAconomyOwnerAddress() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_17:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_41\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_41:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_44\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_45\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_44:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_19:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1266:1279  return _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/AconomyFee.sol\":187:221  address public AconomyOwnerAddress */\n    tag_22:\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/AconomyFee.sol\":156:181  uint16 public _AconomyFee */\n    tag_25:\n      0x00\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/AconomyFee.sol\":284:379  function protocolFee() public view virtual returns (uint16) {... */\n    tag_29:\n        /* \"contracts/AconomyFee.sol\":336:342  uint16 */\n      0x00\n        /* \"contracts/AconomyFee.sol\":361:372  _AconomyFee */\n      dup1\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffff\n      and\n        /* \"contracts/AconomyFee.sol\":354:372  return _AconomyFee */\n      swap1\n      pop\n        /* \"contracts/AconomyFee.sol\":284:379  function protocolFee() public view virtual returns (uint16) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/AconomyFee.sol\":540:847  function setProtocolFee(uint16 newFee) public virtual onlyOwner {... */\n    tag_34:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_49\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_49:\n        /* \"contracts/AconomyFee.sol\":636:646  msg.sender */\n      caller\n        /* \"contracts/AconomyFee.sol\":614:633  AconomyOwnerAddress */\n      0x01\n      0x00\n        /* \"contracts/AconomyFee.sol\":614:646  AconomyOwnerAddress = msg.sender */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/AconomyFee.sol\":709:720  _AconomyFee */\n      0x00\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffff\n      and\n        /* \"contracts/AconomyFee.sol\":699:720  newFee == _AconomyFee */\n      0xffff\n      and\n        /* \"contracts/AconomyFee.sol\":699:705  newFee */\n      dup2\n        /* \"contracts/AconomyFee.sol\":699:720  newFee == _AconomyFee */\n      0xffff\n      and\n      eq\n        /* \"contracts/AconomyFee.sol\":695:729  if (newFee == _AconomyFee) return; */\n      iszero\n      tag_51\n      jumpi\n        /* \"contracts/AconomyFee.sol\":722:729  return; */\n      jump(tag_50)\n        /* \"contracts/AconomyFee.sol\":695:729  if (newFee == _AconomyFee) return; */\n    tag_51:\n        /* \"contracts/AconomyFee.sol\":739:752  uint16 oldFee */\n      0x00\n        /* \"contracts/AconomyFee.sol\":755:766  _AconomyFee */\n      dup1\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffff\n      and\n        /* \"contracts/AconomyFee.sol\":739:766  uint16 oldFee = _AconomyFee */\n      swap1\n      pop\n        /* \"contracts/AconomyFee.sol\":790:796  newFee */\n      dup2\n        /* \"contracts/AconomyFee.sol\":776:787  _AconomyFee */\n      0x00\n      0x14\n        /* \"contracts/AconomyFee.sol\":776:796  _AconomyFee = newFee */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/AconomyFee.sol\":811:840  SetAconomyFee(newFee, oldFee) */\n      0x42844807f1f2d558d424268b6755d861b25ada531856444ccd87f17e2c4273f7\n        /* \"contracts/AconomyFee.sol\":825:831  newFee */\n      dup3\n        /* \"contracts/AconomyFee.sol\":833:839  oldFee */\n      dup3\n        /* \"contracts/AconomyFee.sol\":811:840  SetAconomyFee(newFee, oldFee) */\n      mload(0x40)\n      tag_52\n      swap3\n      swap2\n      swap1\n      tag_53\n      jump\t// in\n    tag_52:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1117:1118  _ */\n      pop\n    tag_50:\n        /* \"contracts/AconomyFee.sol\":540:847  function setProtocolFee(uint16 newFee) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_38:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_55\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_55:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2189:2190  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2177  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_57\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_58\n      swap1\n      tag_59\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_57:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_60\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_45\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_60:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_42:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1445  _msgSender() */\n      tag_62\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1443  _msgSender */\n      tag_63\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1445  _msgSender() */\n      jump\t// in\n    tag_62:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1429  owner() */\n      tag_64\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1427  owner */\n      tag_19\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1429  owner() */\n      jump\t// in\n    tag_64:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_65\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_66\n      swap1\n      tag_67\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_65:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_45:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2531  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2550:2558  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2547  _owner */\n      0x00\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2604:2612  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2594:2602  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_63:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_71:\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_73\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_74\n      jump\t// in\n    tag_73:\n        /* \"#utility.yul\":59:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:289   */\n    tag_75:\n      0x00\n        /* \"#utility.yul\":235:241   */\n      dup2\n        /* \"#utility.yul\":222:242   */\n      calldataload\n        /* \"#utility.yul\":213:242   */\n      swap1\n      pop\n        /* \"#utility.yul\":251:283   */\n      tag_77\n        /* \"#utility.yul\":277:282   */\n      dup2\n        /* \"#utility.yul\":251:283   */\n      tag_78\n      jump\t// in\n    tag_77:\n        /* \"#utility.yul\":203:289   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":295:557   */\n    tag_37:\n      0x00\n        /* \"#utility.yul\":403:405   */\n      0x20\n        /* \"#utility.yul\":391:400   */\n      dup3\n        /* \"#utility.yul\":382:389   */\n      dup5\n        /* \"#utility.yul\":378:401   */\n      sub\n        /* \"#utility.yul\":374:406   */\n      slt\n        /* \"#utility.yul\":371:373   */\n      iszero\n      tag_80\n      jumpi\n        /* \"#utility.yul\":419:420   */\n      0x00\n        /* \"#utility.yul\":416:417   */\n      dup1\n        /* \"#utility.yul\":409:421   */\n      revert\n        /* \"#utility.yul\":371:373   */\n    tag_80:\n        /* \"#utility.yul\":462:463   */\n      0x00\n        /* \"#utility.yul\":487:540   */\n      tag_81\n        /* \"#utility.yul\":532:539   */\n      dup5\n        /* \"#utility.yul\":523:529   */\n      dup3\n        /* \"#utility.yul\":512:521   */\n      dup6\n        /* \"#utility.yul\":508:530   */\n      add\n        /* \"#utility.yul\":487:540   */\n      tag_71\n      jump\t// in\n    tag_81:\n        /* \"#utility.yul\":477:540   */\n      swap2\n      pop\n        /* \"#utility.yul\":433:550   */\n      pop\n        /* \"#utility.yul\":361:557   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":563:823   */\n    tag_33:\n      0x00\n        /* \"#utility.yul\":670:672   */\n      0x20\n        /* \"#utility.yul\":658:667   */\n      dup3\n        /* \"#utility.yul\":649:656   */\n      dup5\n        /* \"#utility.yul\":645:668   */\n      sub\n        /* \"#utility.yul\":641:673   */\n      slt\n        /* \"#utility.yul\":638:640   */\n      iszero\n      tag_83\n      jumpi\n        /* \"#utility.yul\":686:687   */\n      0x00\n        /* \"#utility.yul\":683:684   */\n      dup1\n        /* \"#utility.yul\":676:688   */\n      revert\n        /* \"#utility.yul\":638:640   */\n    tag_83:\n        /* \"#utility.yul\":729:730   */\n      0x00\n        /* \"#utility.yul\":754:806   */\n      tag_84\n        /* \"#utility.yul\":798:805   */\n      dup5\n        /* \"#utility.yul\":789:795   */\n      dup3\n        /* \"#utility.yul\":778:787   */\n      dup6\n        /* \"#utility.yul\":774:796   */\n      add\n        /* \"#utility.yul\":754:806   */\n      tag_75\n      jump\t// in\n    tag_84:\n        /* \"#utility.yul\":744:806   */\n      swap2\n      pop\n        /* \"#utility.yul\":700:816   */\n      pop\n        /* \"#utility.yul\":628:823   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":829:947   */\n    tag_85:\n        /* \"#utility.yul\":916:940   */\n      tag_87\n        /* \"#utility.yul\":934:939   */\n      dup2\n        /* \"#utility.yul\":916:940   */\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"#utility.yul\":911:914   */\n      dup3\n        /* \"#utility.yul\":904:941   */\n      mstore\n        /* \"#utility.yul\":894:947   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":953:1319   */\n    tag_89:\n      0x00\n        /* \"#utility.yul\":1116:1183   */\n      tag_91\n        /* \"#utility.yul\":1180:1182   */\n      0x26\n        /* \"#utility.yul\":1175:1178   */\n      dup4\n        /* \"#utility.yul\":1116:1183   */\n      tag_92\n      jump\t// in\n    tag_91:\n        /* \"#utility.yul\":1109:1183   */\n      swap2\n      pop\n        /* \"#utility.yul\":1192:1285   */\n      tag_93\n        /* \"#utility.yul\":1281:1284   */\n      dup3\n        /* \"#utility.yul\":1192:1285   */\n      tag_94\n      jump\t// in\n    tag_93:\n        /* \"#utility.yul\":1310:1312   */\n      0x40\n        /* \"#utility.yul\":1305:1308   */\n      dup3\n        /* \"#utility.yul\":1301:1313   */\n      add\n        /* \"#utility.yul\":1294:1313   */\n      swap1\n      pop\n        /* \"#utility.yul\":1099:1319   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1325:1691   */\n    tag_95:\n      0x00\n        /* \"#utility.yul\":1488:1555   */\n      tag_97\n        /* \"#utility.yul\":1552:1554   */\n      0x20\n        /* \"#utility.yul\":1547:1550   */\n      dup4\n        /* \"#utility.yul\":1488:1555   */\n      tag_92\n      jump\t// in\n    tag_97:\n        /* \"#utility.yul\":1481:1555   */\n      swap2\n      pop\n        /* \"#utility.yul\":1564:1657   */\n      tag_98\n        /* \"#utility.yul\":1653:1656   */\n      dup3\n        /* \"#utility.yul\":1564:1657   */\n      tag_99\n      jump\t// in\n    tag_98:\n        /* \"#utility.yul\":1682:1684   */\n      0x20\n        /* \"#utility.yul\":1677:1680   */\n      dup3\n        /* \"#utility.yul\":1673:1685   */\n      add\n        /* \"#utility.yul\":1666:1685   */\n      swap1\n      pop\n        /* \"#utility.yul\":1471:1691   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1697:1812   */\n    tag_100:\n        /* \"#utility.yul\":1782:1805   */\n      tag_102\n        /* \"#utility.yul\":1799:1804   */\n      dup2\n        /* \"#utility.yul\":1782:1805   */\n      tag_103\n      jump\t// in\n    tag_102:\n        /* \"#utility.yul\":1777:1780   */\n      dup3\n        /* \"#utility.yul\":1770:1806   */\n      mstore\n        /* \"#utility.yul\":1760:1812   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1818:2040   */\n    tag_15:\n      0x00\n        /* \"#utility.yul\":1949:1951   */\n      0x20\n        /* \"#utility.yul\":1938:1947   */\n      dup3\n        /* \"#utility.yul\":1934:1952   */\n      add\n        /* \"#utility.yul\":1926:1952   */\n      swap1\n      pop\n        /* \"#utility.yul\":1962:2033   */\n      tag_105\n        /* \"#utility.yul\":2030:2031   */\n      0x00\n        /* \"#utility.yul\":2019:2028   */\n      dup4\n        /* \"#utility.yul\":2015:2032   */\n      add\n        /* \"#utility.yul\":2006:2012   */\n      dup5\n        /* \"#utility.yul\":1962:2033   */\n      tag_85\n      jump\t// in\n    tag_105:\n        /* \"#utility.yul\":1916:2040   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2046:2465   */\n    tag_59:\n      0x00\n        /* \"#utility.yul\":2250:2252   */\n      0x20\n        /* \"#utility.yul\":2239:2248   */\n      dup3\n        /* \"#utility.yul\":2235:2253   */\n      add\n        /* \"#utility.yul\":2227:2253   */\n      swap1\n      pop\n        /* \"#utility.yul\":2299:2308   */\n      dup2\n        /* \"#utility.yul\":2293:2297   */\n      dup2\n        /* \"#utility.yul\":2289:2309   */\n      sub\n        /* \"#utility.yul\":2285:2286   */\n      0x00\n        /* \"#utility.yul\":2274:2283   */\n      dup4\n        /* \"#utility.yul\":2270:2287   */\n      add\n        /* \"#utility.yul\":2263:2310   */\n      mstore\n        /* \"#utility.yul\":2327:2458   */\n      tag_107\n        /* \"#utility.yul\":2453:2457   */\n      dup2\n        /* \"#utility.yul\":2327:2458   */\n      tag_89\n      jump\t// in\n    tag_107:\n        /* \"#utility.yul\":2319:2458   */\n      swap1\n      pop\n        /* \"#utility.yul\":2217:2465   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2471:2890   */\n    tag_67:\n      0x00\n        /* \"#utility.yul\":2675:2677   */\n      0x20\n        /* \"#utility.yul\":2664:2673   */\n      dup3\n        /* \"#utility.yul\":2660:2678   */\n      add\n        /* \"#utility.yul\":2652:2678   */\n      swap1\n      pop\n        /* \"#utility.yul\":2724:2733   */\n      dup2\n        /* \"#utility.yul\":2718:2722   */\n      dup2\n        /* \"#utility.yul\":2714:2734   */\n      sub\n        /* \"#utility.yul\":2710:2711   */\n      0x00\n        /* \"#utility.yul\":2699:2708   */\n      dup4\n        /* \"#utility.yul\":2695:2712   */\n      add\n        /* \"#utility.yul\":2688:2735   */\n      mstore\n        /* \"#utility.yul\":2752:2883   */\n      tag_109\n        /* \"#utility.yul\":2878:2882   */\n      dup2\n        /* \"#utility.yul\":2752:2883   */\n      tag_95\n      jump\t// in\n    tag_109:\n        /* \"#utility.yul\":2744:2883   */\n      swap1\n      pop\n        /* \"#utility.yul\":2642:2890   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2896:3114   */\n    tag_27:\n      0x00\n        /* \"#utility.yul\":3025:3027   */\n      0x20\n        /* \"#utility.yul\":3014:3023   */\n      dup3\n        /* \"#utility.yul\":3010:3028   */\n      add\n        /* \"#utility.yul\":3002:3028   */\n      swap1\n      pop\n        /* \"#utility.yul\":3038:3107   */\n      tag_111\n        /* \"#utility.yul\":3104:3105   */\n      0x00\n        /* \"#utility.yul\":3093:3102   */\n      dup4\n        /* \"#utility.yul\":3089:3106   */\n      add\n        /* \"#utility.yul\":3080:3086   */\n      dup5\n        /* \"#utility.yul\":3038:3107   */\n      tag_100\n      jump\t// in\n    tag_111:\n        /* \"#utility.yul\":2992:3114   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3120:3444   */\n    tag_53:\n      0x00\n        /* \"#utility.yul\":3275:3277   */\n      0x40\n        /* \"#utility.yul\":3264:3273   */\n      dup3\n        /* \"#utility.yul\":3260:3278   */\n      add\n        /* \"#utility.yul\":3252:3278   */\n      swap1\n      pop\n        /* \"#utility.yul\":3288:3357   */\n      tag_113\n        /* \"#utility.yul\":3354:3355   */\n      0x00\n        /* \"#utility.yul\":3343:3352   */\n      dup4\n        /* \"#utility.yul\":3339:3356   */\n      add\n        /* \"#utility.yul\":3330:3336   */\n      dup6\n        /* \"#utility.yul\":3288:3357   */\n      tag_100\n      jump\t// in\n    tag_113:\n        /* \"#utility.yul\":3367:3437   */\n      tag_114\n        /* \"#utility.yul\":3433:3435   */\n      0x20\n        /* \"#utility.yul\":3422:3431   */\n      dup4\n        /* \"#utility.yul\":3418:3436   */\n      add\n        /* \"#utility.yul\":3409:3415   */\n      dup5\n        /* \"#utility.yul\":3367:3437   */\n      tag_100\n      jump\t// in\n    tag_114:\n        /* \"#utility.yul\":3242:3444   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3450:3619   */\n    tag_92:\n      0x00\n        /* \"#utility.yul\":3568:3574   */\n      dup3\n        /* \"#utility.yul\":3563:3566   */\n      dup3\n        /* \"#utility.yul\":3556:3575   */\n      mstore\n        /* \"#utility.yul\":3608:3612   */\n      0x20\n        /* \"#utility.yul\":3603:3606   */\n      dup3\n        /* \"#utility.yul\":3599:3613   */\n      add\n        /* \"#utility.yul\":3584:3613   */\n      swap1\n      pop\n        /* \"#utility.yul\":3546:3619   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3625:3721   */\n    tag_88:\n      0x00\n        /* \"#utility.yul\":3691:3715   */\n      tag_117\n        /* \"#utility.yul\":3709:3714   */\n      dup3\n        /* \"#utility.yul\":3691:3715   */\n      tag_118\n      jump\t// in\n    tag_117:\n        /* \"#utility.yul\":3680:3715   */\n      swap1\n      pop\n        /* \"#utility.yul\":3670:3721   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3727:3816   */\n    tag_103:\n      0x00\n        /* \"#utility.yul\":3803:3809   */\n      0xffff\n        /* \"#utility.yul\":3796:3801   */\n      dup3\n        /* \"#utility.yul\":3792:3810   */\n      and\n        /* \"#utility.yul\":3781:3810   */\n      swap1\n      pop\n        /* \"#utility.yul\":3771:3816   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3822:3948   */\n    tag_118:\n      0x00\n        /* \"#utility.yul\":3899:3941   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":3892:3897   */\n      dup3\n        /* \"#utility.yul\":3888:3942   */\n      and\n        /* \"#utility.yul\":3877:3942   */\n      swap1\n      pop\n        /* \"#utility.yul\":3867:3948   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3954:4179   */\n    tag_94:\n        /* \"#utility.yul\":4094:4128   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":4090:4091   */\n      0x00\n        /* \"#utility.yul\":4082:4088   */\n      dup3\n        /* \"#utility.yul\":4078:4092   */\n      add\n        /* \"#utility.yul\":4071:4129   */\n      mstore\n        /* \"#utility.yul\":4163:4171   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4158:4160   */\n      0x20\n        /* \"#utility.yul\":4150:4156   */\n      dup3\n        /* \"#utility.yul\":4146:4161   */\n      add\n        /* \"#utility.yul\":4139:4172   */\n      mstore\n        /* \"#utility.yul\":4060:4179   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4185:4367   */\n    tag_99:\n        /* \"#utility.yul\":4325:4359   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":4321:4322   */\n      0x00\n        /* \"#utility.yul\":4313:4319   */\n      dup3\n        /* \"#utility.yul\":4309:4323   */\n      add\n        /* \"#utility.yul\":4302:4360   */\n      mstore\n        /* \"#utility.yul\":4291:4367   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4373:4495   */\n    tag_74:\n        /* \"#utility.yul\":4446:4470   */\n      tag_124\n        /* \"#utility.yul\":4464:4469   */\n      dup2\n        /* \"#utility.yul\":4446:4470   */\n      tag_88\n      jump\t// in\n    tag_124:\n        /* \"#utility.yul\":4439:4444   */\n      dup2\n        /* \"#utility.yul\":4436:4471   */\n      eq\n        /* \"#utility.yul\":4426:4428   */\n      tag_125\n      jumpi\n        /* \"#utility.yul\":4485:4486   */\n      0x00\n        /* \"#utility.yul\":4482:4483   */\n      dup1\n        /* \"#utility.yul\":4475:4487   */\n      revert\n        /* \"#utility.yul\":4426:4428   */\n    tag_125:\n        /* \"#utility.yul\":4416:4495   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4501:4621   */\n    tag_78:\n        /* \"#utility.yul\":4573:4596   */\n      tag_127\n        /* \"#utility.yul\":4590:4595   */\n      dup2\n        /* \"#utility.yul\":4573:4596   */\n      tag_103\n      jump\t// in\n    tag_127:\n        /* \"#utility.yul\":4566:4571   */\n      dup2\n        /* \"#utility.yul\":4563:4597   */\n      eq\n        /* \"#utility.yul\":4553:4555   */\n      tag_128\n      jumpi\n        /* \"#utility.yul\":4611:4612   */\n      0x00\n        /* \"#utility.yul\":4608:4609   */\n      dup1\n        /* \"#utility.yul\":4601:4613   */\n      revert\n        /* \"#utility.yul\":4553:4555   */\n    tag_128:\n        /* \"#utility.yul\":4543:4621   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220c926ae0df154990b2d8c0d33ef43e2b7306482a00852e9fc6e4e65f4f33d2db664736f6c63430008020033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6107748061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639a3d4ae61161005b5780639a3d4ae6146100f1578063b0e21e8a1461010f578063e4467f351461012d578063f2fde38b1461014957610088565b80634dd9ccb11461008d578063715018a6146100ab5780638da5cb5b146100b5578063951f9c5b146100d3575b600080fd5b610095610165565b6040516100a291906105a8565b60405180910390f35b6100b361018f565b005b6100bd6101a3565b6040516100ca91906105a8565b60405180910390f35b6100db6101cc565b6040516100e891906105a8565b60405180910390f35b6100f96101f2565b6040516101069190610603565b60405180910390f35b610117610206565b6040516101249190610603565b60405180910390f35b6101476004803603810190610142919061051b565b61021d565b005b610163600480360381019061015e91906104f2565b6102fa565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61019761037e565b6101a160006103fc565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060149054906101000a900461ffff1681565b60008060149054906101000a900461ffff16905090565b61022561037e565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060149054906101000a900461ffff1661ffff168161ffff16141561028b576102f7565b60008060149054906101000a900461ffff16905081600060146101000a81548161ffff021916908361ffff1602179055507f42844807f1f2d558d424268b6755d861b25ada531856444ccd87f17e2c4273f782826040516102ed92919061061e565b60405180910390a1505b50565b61030261037e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610372576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610369906105c3565b60405180910390fd5b61037b816103fc565b50565b6103866104c0565b73ffffffffffffffffffffffffffffffffffffffff166103a46101a3565b73ffffffffffffffffffffffffffffffffffffffff16146103fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f1906105e3565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000813590506104d781610710565b92915050565b6000813590506104ec81610727565b92915050565b60006020828403121561050457600080fd5b6000610512848285016104c8565b91505092915050565b60006020828403121561052d57600080fd5b600061053b848285016104dd565b91505092915050565b61054d81610658565b82525050565b6000610560602683610647565b915061056b82610698565b604082019050919050565b6000610583602083610647565b915061058e826106e7565b602082019050919050565b6105a28161066a565b82525050565b60006020820190506105bd6000830184610544565b92915050565b600060208201905081810360008301526105dc81610553565b9050919050565b600060208201905081810360008301526105fc81610576565b9050919050565b60006020820190506106186000830184610599565b92915050565b60006040820190506106336000830185610599565b6106406020830184610599565b9392505050565b600082825260208201905092915050565b600061066382610678565b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61071981610658565b811461072457600080fd5b50565b6107308161066a565b811461073b57600080fd5b5056fea2646970667358221220c926ae0df154990b2d8c0d33ef43e2b7306482a00852e9fc6e4e65f4f33d2db664736f6c63430008020033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D PUSH2 0x22 PUSH2 0x32 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x3A PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x774 DUP1 PUSH2 0x10D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9A3D4AE6 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x9A3D4AE6 EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0xB0E21E8A EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0xE4467F35 EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x149 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x4DD9CCB1 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x951F9C5B EQ PUSH2 0xD3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x165 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB3 PUSH2 0x18F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDB PUSH2 0x1CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF9 PUSH2 0x1F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x106 SWAP2 SWAP1 PUSH2 0x603 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x117 PUSH2 0x206 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x603 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x147 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x142 SWAP2 SWAP1 PUSH2 0x51B JUMP JUMPDEST PUSH2 0x21D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x163 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15E SWAP2 SWAP1 PUSH2 0x4F2 JUMP JUMPDEST PUSH2 0x2FA JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x197 PUSH2 0x37E JUMP JUMPDEST PUSH2 0x1A1 PUSH1 0x0 PUSH2 0x3FC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x225 PUSH2 0x37E JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND EQ ISZERO PUSH2 0x28B JUMPI PUSH2 0x2F7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND SWAP1 POP DUP2 PUSH1 0x0 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x42844807F1F2D558D424268B6755D861B25ADA531856444CCD87F17E2C4273F7 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2ED SWAP3 SWAP2 SWAP1 PUSH2 0x61E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMPDEST POP JUMP JUMPDEST PUSH2 0x302 PUSH2 0x37E JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x372 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x369 SWAP1 PUSH2 0x5C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x37B DUP2 PUSH2 0x3FC JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x386 PUSH2 0x4C0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3A4 PUSH2 0x1A3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F1 SWAP1 PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x4D7 DUP2 PUSH2 0x710 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x4EC DUP2 PUSH2 0x727 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x512 DUP5 DUP3 DUP6 ADD PUSH2 0x4C8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x53B DUP5 DUP3 DUP6 ADD PUSH2 0x4DD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x54D DUP2 PUSH2 0x658 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x560 PUSH1 0x26 DUP4 PUSH2 0x647 JUMP JUMPDEST SWAP2 POP PUSH2 0x56B DUP3 PUSH2 0x698 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x583 PUSH1 0x20 DUP4 PUSH2 0x647 JUMP JUMPDEST SWAP2 POP PUSH2 0x58E DUP3 PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A2 DUP2 PUSH2 0x66A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5BD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x544 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5DC DUP2 PUSH2 0x553 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5FC DUP2 PUSH2 0x576 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x618 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x599 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x633 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x599 JUMP JUMPDEST PUSH2 0x640 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x599 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x663 DUP3 PUSH2 0x678 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x719 DUP2 PUSH2 0x658 JUMP JUMPDEST DUP2 EQ PUSH2 0x724 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x730 DUP2 PUSH2 0x66A JUMP JUMPDEST DUP2 EQ PUSH2 0x73B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 0x26 0xAE 0xD CALL SLOAD SWAP10 SIGNEXTEND 0x2D DUP13 0xD CALLER 0xEF NUMBER 0xE2 0xB7 ADDRESS PUSH5 0x82A00852E9 0xFC PUSH15 0x4E65F4F33D2DB664736F6C63430008 MUL STOP CALLER ",
							"sourceMap": "119:730:2:-:0;;;;;;;;;;;;;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;119:730:2;;640:96:1;693:7;719:10;712:17;;640:96;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2433:187;;:::o;119:730:2:-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4624:3",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:3"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:3"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:3"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:3",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:3",
														"type": ""
													}
												],
												"src": "7:139:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "203:86:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "213:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "235:6:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "222:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "222:20:3"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "213:5:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "277:5:3"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint16",
																	"nodeType": "YulIdentifier",
																	"src": "251:25:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "251:32:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "251:32:3"
														}
													]
												},
												"name": "abi_decode_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "181:6:3",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "189:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "197:5:3",
														"type": ""
													}
												],
												"src": "152:137:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "361:196:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "407:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "416:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "419:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "409:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "409:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "409:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "382:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "391:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "378:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "378:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "403:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "374:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "374:32:3"
															},
															"nodeType": "YulIf",
															"src": "371:2:3"
														},
														{
															"nodeType": "YulBlock",
															"src": "433:117:3",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "448:15:3",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "462:1:3",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "452:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "477:63:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "512:9:3"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "523:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "508:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "508:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "532:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "487:20:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "487:53:3"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "477:6:3"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "331:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "342:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "354:6:3",
														"type": ""
													}
												],
												"src": "295:262:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "628:195:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "674:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "683:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "686:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "676:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "676:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "676:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "649:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "658:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "645:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "645:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "670:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "641:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "641:32:3"
															},
															"nodeType": "YulIf",
															"src": "638:2:3"
														},
														{
															"nodeType": "YulBlock",
															"src": "700:116:3",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "715:15:3",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "729:1:3",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "719:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "744:62:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "778:9:3"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "789:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "774:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "774:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "798:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint16",
																			"nodeType": "YulIdentifier",
																			"src": "754:19:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "754:52:3"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "744:6:3"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "598:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "609:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "621:6:3",
														"type": ""
													}
												],
												"src": "563:260:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "894:53:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "911:3:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "934:5:3"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "916:17:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "916:24:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "904:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "904:37:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "904:37:3"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "882:5:3",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "889:3:3",
														"type": ""
													}
												],
												"src": "829:118:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1099:220:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1109:74:3",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1175:3:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1180:2:3",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1116:58:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1116:67:3"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "1109:3:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1281:3:3"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																	"nodeType": "YulIdentifier",
																	"src": "1192:88:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1192:93:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1192:93:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1294:19:3",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1305:3:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1310:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1301:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1301:12:3"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1294:3:3"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1087:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1095:3:3",
														"type": ""
													}
												],
												"src": "953:366:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1471:220:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1481:74:3",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1547:3:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1552:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1488:58:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1488:67:3"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "1481:3:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1653:3:3"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																	"nodeType": "YulIdentifier",
																	"src": "1564:88:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1564:93:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1564:93:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1666:19:3",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1677:3:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1682:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1673:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1673:12:3"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1666:3:3"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1459:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1467:3:3",
														"type": ""
													}
												],
												"src": "1325:366:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1760:52:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1777:3:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1799:5:3"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint16",
																			"nodeType": "YulIdentifier",
																			"src": "1782:16:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1782:23:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1770:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1770:36:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1770:36:3"
														}
													]
												},
												"name": "abi_encode_t_uint16_to_t_uint16_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1748:5:3",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1755:3:3",
														"type": ""
													}
												],
												"src": "1697:115:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1916:124:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1926:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1938:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1949:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1934:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1934:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1926:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2006:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2019:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2030:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2015:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2015:17:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1962:43:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1962:71:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1962:71:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1888:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1900:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1911:4:3",
														"type": ""
													}
												],
												"src": "1818:222:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2217:248:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2227:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2239:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2250:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2235:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2235:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2227:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2274:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2285:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2270:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2270:17:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "2293:4:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2299:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2289:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2289:20:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2263:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2263:47:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2263:47:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2319:139:3",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "2453:4:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2327:124:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2327:131:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2319:4:3"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2197:9:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2212:4:3",
														"type": ""
													}
												],
												"src": "2046:419:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2642:248:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2652:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2664:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2675:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2660:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2660:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2652:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2699:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2710:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2695:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2695:17:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "2718:4:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2724:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2714:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2714:20:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2688:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2688:47:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2688:47:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2744:139:3",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "2878:4:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2752:124:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2752:131:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2744:4:3"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2622:9:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2637:4:3",
														"type": ""
													}
												],
												"src": "2471:419:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2992:122:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3002:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3014:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3025:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3010:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3010:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3002:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3080:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3093:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3104:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3089:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3089:17:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint16_to_t_uint16_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3038:41:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3038:69:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3038:69:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2964:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2976:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2987:4:3",
														"type": ""
													}
												],
												"src": "2896:218:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3242:202:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3252:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3264:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3275:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3260:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3260:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3252:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3330:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3343:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3354:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3339:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3339:17:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint16_to_t_uint16_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3288:41:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3288:69:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3288:69:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "3409:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3422:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3433:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3418:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3418:18:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint16_to_t_uint16_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3367:41:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3367:70:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3367:70:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint16_t_uint16__to_t_uint16_t_uint16__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3206:9:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3218:6:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3226:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3237:4:3",
														"type": ""
													}
												],
												"src": "3120:324:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3546:73:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3563:3:3"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3568:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3556:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3556:19:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3556:19:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3584:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3603:3:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3608:4:3",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3599:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3599:14:3"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "3584:11:3"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3518:3:3",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "3523:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "3534:11:3",
														"type": ""
													}
												],
												"src": "3450:169:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3670:51:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3680:35:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3709:5:3"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "3691:17:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3691:24:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3680:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3652:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3662:7:3",
														"type": ""
													}
												],
												"src": "3625:96:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3771:45:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3781:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3796:5:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3803:6:3",
																		"type": "",
																		"value": "0xffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3792:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3792:18:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3781:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3753:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3763:7:3",
														"type": ""
													}
												],
												"src": "3727:89:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3867:81:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3877:65:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3892:5:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3899:42:3",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3888:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "3888:54:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3877:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3849:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3859:7:3",
														"type": ""
													}
												],
												"src": "3822:126:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4060:119:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4082:6:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4090:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4078:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4078:14:3"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4094:34:3",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4071:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4071:58:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4071:58:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4150:6:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4158:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4146:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4146:15:3"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4163:8:3",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4139:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4139:33:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4139:33:3"
														}
													]
												},
												"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "4052:6:3",
														"type": ""
													}
												],
												"src": "3954:225:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4291:76:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4313:6:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4321:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4309:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4309:14:3"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4325:34:3",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4302:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4302:58:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4302:58:3"
														}
													]
												},
												"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "4283:6:3",
														"type": ""
													}
												],
												"src": "4185:182:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4416:79:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4473:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4482:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4485:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4475:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4475:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4475:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4439:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4464:5:3"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "4446:17:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4446:24:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4436:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4436:35:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4429:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4429:43:3"
															},
															"nodeType": "YulIf",
															"src": "4426:2:3"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4409:5:3",
														"type": ""
													}
												],
												"src": "4373:122:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4543:78:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4599:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4608:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4611:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4601:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4601:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4601:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4566:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4590:5:3"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint16",
																					"nodeType": "YulIdentifier",
																					"src": "4573:16:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4573:23:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4563:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4563:34:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4556:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "4556:42:3"
															},
															"nodeType": "YulIf",
															"src": "4553:2:3"
														}
													]
												},
												"name": "validator_revert_t_uint16",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4536:5:3",
														"type": ""
													}
												],
												"src": "4501:120:3"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_uint16(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint16(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint16(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint16(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint16_t_uint16__to_t_uint16_t_uint16__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint16(value) {\n        if iszero(eq(value, cleanup_t_uint16(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 3,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100885760003560e01c80639a3d4ae61161005b5780639a3d4ae6146100f1578063b0e21e8a1461010f578063e4467f351461012d578063f2fde38b1461014957610088565b80634dd9ccb11461008d578063715018a6146100ab5780638da5cb5b146100b5578063951f9c5b146100d3575b600080fd5b610095610165565b6040516100a291906105a8565b60405180910390f35b6100b361018f565b005b6100bd6101a3565b6040516100ca91906105a8565b60405180910390f35b6100db6101cc565b6040516100e891906105a8565b60405180910390f35b6100f96101f2565b6040516101069190610603565b60405180910390f35b610117610206565b6040516101249190610603565b60405180910390f35b6101476004803603810190610142919061051b565b61021d565b005b610163600480360381019061015e91906104f2565b6102fa565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61019761037e565b6101a160006103fc565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060149054906101000a900461ffff1681565b60008060149054906101000a900461ffff16905090565b61022561037e565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060149054906101000a900461ffff1661ffff168161ffff16141561028b576102f7565b60008060149054906101000a900461ffff16905081600060146101000a81548161ffff021916908361ffff1602179055507f42844807f1f2d558d424268b6755d861b25ada531856444ccd87f17e2c4273f782826040516102ed92919061061e565b60405180910390a1505b50565b61030261037e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610372576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610369906105c3565b60405180910390fd5b61037b816103fc565b50565b6103866104c0565b73ffffffffffffffffffffffffffffffffffffffff166103a46101a3565b73ffffffffffffffffffffffffffffffffffffffff16146103fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f1906105e3565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000813590506104d781610710565b92915050565b6000813590506104ec81610727565b92915050565b60006020828403121561050457600080fd5b6000610512848285016104c8565b91505092915050565b60006020828403121561052d57600080fd5b600061053b848285016104dd565b91505092915050565b61054d81610658565b82525050565b6000610560602683610647565b915061056b82610698565b604082019050919050565b6000610583602083610647565b915061058e826106e7565b602082019050919050565b6105a28161066a565b82525050565b60006020820190506105bd6000830184610544565b92915050565b600060208201905081810360008301526105dc81610553565b9050919050565b600060208201905081810360008301526105fc81610576565b9050919050565b60006020820190506106186000830184610599565b92915050565b60006040820190506106336000830185610599565b6106406020830184610599565b9392505050565b600082825260208201905092915050565b600061066382610678565b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61071981610658565b811461072457600080fd5b50565b6107308161066a565b811461073b57600080fd5b5056fea2646970667358221220c926ae0df154990b2d8c0d33ef43e2b7306482a00852e9fc6e4e65f4f33d2db664736f6c63430008020033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9A3D4AE6 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x9A3D4AE6 EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0xB0E21E8A EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0xE4467F35 EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x149 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x4DD9CCB1 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x951F9C5B EQ PUSH2 0xD3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x165 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB3 PUSH2 0x18F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBD PUSH2 0x1A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDB PUSH2 0x1CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF9 PUSH2 0x1F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x106 SWAP2 SWAP1 PUSH2 0x603 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x117 PUSH2 0x206 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x603 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x147 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x142 SWAP2 SWAP1 PUSH2 0x51B JUMP JUMPDEST PUSH2 0x21D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x163 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15E SWAP2 SWAP1 PUSH2 0x4F2 JUMP JUMPDEST PUSH2 0x2FA JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x197 PUSH2 0x37E JUMP JUMPDEST PUSH2 0x1A1 PUSH1 0x0 PUSH2 0x3FC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x225 PUSH2 0x37E JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND EQ ISZERO PUSH2 0x28B JUMPI PUSH2 0x2F7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND SWAP1 POP DUP2 PUSH1 0x0 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x42844807F1F2D558D424268B6755D861B25ADA531856444CCD87F17E2C4273F7 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2ED SWAP3 SWAP2 SWAP1 PUSH2 0x61E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMPDEST POP JUMP JUMPDEST PUSH2 0x302 PUSH2 0x37E JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x372 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x369 SWAP1 PUSH2 0x5C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x37B DUP2 PUSH2 0x3FC JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x386 PUSH2 0x4C0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3A4 PUSH2 0x1A3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F1 SWAP1 PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x4D7 DUP2 PUSH2 0x710 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x4EC DUP2 PUSH2 0x727 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x512 DUP5 DUP3 DUP6 ADD PUSH2 0x4C8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x53B DUP5 DUP3 DUP6 ADD PUSH2 0x4DD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x54D DUP2 PUSH2 0x658 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x560 PUSH1 0x26 DUP4 PUSH2 0x647 JUMP JUMPDEST SWAP2 POP PUSH2 0x56B DUP3 PUSH2 0x698 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x583 PUSH1 0x20 DUP4 PUSH2 0x647 JUMP JUMPDEST SWAP2 POP PUSH2 0x58E DUP3 PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A2 DUP2 PUSH2 0x66A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5BD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x544 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5DC DUP2 PUSH2 0x553 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5FC DUP2 PUSH2 0x576 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x618 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x599 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x633 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x599 JUMP JUMPDEST PUSH2 0x640 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x599 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x663 DUP3 PUSH2 0x678 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x719 DUP2 PUSH2 0x658 JUMP JUMPDEST DUP2 EQ PUSH2 0x724 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x730 DUP2 PUSH2 0x66A JUMP JUMPDEST DUP2 EQ PUSH2 0x73B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 0x26 0xAE 0xD CALL SLOAD SWAP10 SIGNEXTEND 0x2D DUP13 0xD CALLER 0xEF NUMBER 0xE2 0xB7 ADDRESS PUSH5 0x82A00852E9 0xFC PUSH15 0x4E65F4F33D2DB664736F6C63430008 MUL STOP CALLER ",
							"sourceMap": "119:730:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;385:115;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1831:101:0;;;:::i;:::-;;1201:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;187:34:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;156:25;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;284:95;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;540:307;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2081:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;385:115:2;448:7;474:19;;;;;;;;;;;467:26;;385:115;:::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;1201:85::-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;187:34:2:-;;;;;;;;;;;;;:::o;156:25::-;;;;;;;;;;;;;:::o;284:95::-;336:6;361:11;;;;;;;;;;;354:18;;284:95;:::o;540:307::-;1094:13:0;:11;:13::i;:::-;636:10:2::1;614:19;;:32;;;;;;;;;;;;;;;;;;709:11;;;;;;;;;;;699:21;;:6;:21;;;695:34;;;722:7;;695:34;739:13;755:11:::0;::::1;;;;;;;;;;739:27;;790:6;776:11;;:20;;;;;;;;;;;;;;;;;;811:29;825:6;833;811:29;;;;;;;:::i;:::-;;;;;;;;1117:1:0;;540:307:2::0;:::o;2081:198:0:-;1094:13;:11;:13::i;:::-;2189:1:::1;2169:22;;:8;:22;;;;2161:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;1359:130::-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;2433:187::-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2433:187;;:::o;640:96:1:-;693:7;719:10;712:17;;640:96;:::o;7:139:3:-;;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;152:137::-;;235:6;222:20;213:29;;251:32;277:5;251:32;:::i;:::-;203:86;;;;:::o;295:262::-;;403:2;391:9;382:7;378:23;374:32;371:2;;;419:1;416;409:12;371:2;462:1;487:53;532:7;523:6;512:9;508:22;487:53;:::i;:::-;477:63;;433:117;361:196;;;;:::o;563:260::-;;670:2;658:9;649:7;645:23;641:32;638:2;;;686:1;683;676:12;638:2;729:1;754:52;798:7;789:6;778:9;774:22;754:52;:::i;:::-;744:62;;700:116;628:195;;;;:::o;829:118::-;916:24;934:5;916:24;:::i;:::-;911:3;904:37;894:53;;:::o;953:366::-;;1116:67;1180:2;1175:3;1116:67;:::i;:::-;1109:74;;1192:93;1281:3;1192:93;:::i;:::-;1310:2;1305:3;1301:12;1294:19;;1099:220;;;:::o;1325:366::-;;1488:67;1552:2;1547:3;1488:67;:::i;:::-;1481:74;;1564:93;1653:3;1564:93;:::i;:::-;1682:2;1677:3;1673:12;1666:19;;1471:220;;;:::o;1697:115::-;1782:23;1799:5;1782:23;:::i;:::-;1777:3;1770:36;1760:52;;:::o;1818:222::-;;1949:2;1938:9;1934:18;1926:26;;1962:71;2030:1;2019:9;2015:17;2006:6;1962:71;:::i;:::-;1916:124;;;;:::o;2046:419::-;;2250:2;2239:9;2235:18;2227:26;;2299:9;2293:4;2289:20;2285:1;2274:9;2270:17;2263:47;2327:131;2453:4;2327:131;:::i;:::-;2319:139;;2217:248;;;:::o;2471:419::-;;2675:2;2664:9;2660:18;2652:26;;2724:9;2718:4;2714:20;2710:1;2699:9;2695:17;2688:47;2752:131;2878:4;2752:131;:::i;:::-;2744:139;;2642:248;;;:::o;2896:218::-;;3025:2;3014:9;3010:18;3002:26;;3038:69;3104:1;3093:9;3089:17;3080:6;3038:69;:::i;:::-;2992:122;;;;:::o;3120:324::-;;3275:2;3264:9;3260:18;3252:26;;3288:69;3354:1;3343:9;3339:17;3330:6;3288:69;:::i;:::-;3367:70;3433:2;3422:9;3418:18;3409:6;3367:70;:::i;:::-;3242:202;;;;;:::o;3450:169::-;;3568:6;3563:3;3556:19;3608:4;3603:3;3599:14;3584:29;;3546:73;;;;:::o;3625:96::-;;3691:24;3709:5;3691:24;:::i;:::-;3680:35;;3670:51;;;:::o;3727:89::-;;3803:6;3796:5;3792:18;3781:29;;3771:45;;;:::o;3822:126::-;;3899:42;3892:5;3888:54;3877:65;;3867:81;;;:::o;3954:225::-;4094:34;4090:1;4082:6;4078:14;4071:58;4163:8;4158:2;4150:6;4146:15;4139:33;4060:119;:::o;4185:182::-;4325:34;4321:1;4313:6;4309:14;4302:58;4291:76;:::o;4373:122::-;4446:24;4464:5;4446:24;:::i;:::-;4439:5;4436:35;4426:2;;4485:1;4482;4475:12;4426:2;4416:79;:::o;4501:120::-;4573:23;4590:5;4573:23;:::i;:::-;4566:5;4563:34;4553:2;;4611:1;4608;4601:12;4553:2;4543:78;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "381600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"AconomyOwnerAddress()": "1281",
								"_AconomyFee()": "1221",
								"getAconomyOwnerAddress()": "1223",
								"owner()": "1267",
								"protocolFee()": "1251",
								"renounceOwnership()": "24421",
								"setProtocolFee(uint16)": "infinite",
								"transferOwnership(address)": "24813"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 119,
									"end": 849,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 119,
									"end": 849,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 119,
									"end": 849,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 119,
									"end": 849,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 119,
									"end": 849,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 119,
									"end": 849,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 119,
									"end": 849,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 119,
									"end": 849,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 119,
									"end": 849,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 119,
									"end": 849,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 119,
									"end": 849,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 119,
									"end": 849,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 119,
									"end": 849,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 119,
									"end": 849,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "tag",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 954,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 119,
									"end": 849,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 119,
									"end": 849,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 693,
									"end": 700,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 1
								},
								{
									"begin": 712,
									"end": 729,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 712,
									"end": 729,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 640,
									"end": 736,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2531,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2550,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2547,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2541,
									"end": 2547,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2604,
									"end": 2612,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2594,
									"end": 2602,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 119,
									"end": 849,
									"name": "tag",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 119,
									"end": 849,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 119,
									"end": 849,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 119,
									"end": 849,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 119,
									"end": 849,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 119,
									"end": 849,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 119,
									"end": 849,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 119,
									"end": 849,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 119,
									"end": 849,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c926ae0df154990b2d8c0d33ef43e2b7306482a00852e9fc6e4e65f4f33d2db664736f6c63430008020033",
									".code": [
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "9A3D4AE6"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "9A3D4AE6"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "B0E21E8A"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "E4467F35"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "F2FDE38B"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "4DD9CCB1"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "715018A6"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "8DA5CB5B"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "951F9C5B"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 119,
											"end": 849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 119,
											"end": 849,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 385,
											"end": 500,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 385,
											"end": 500,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 385,
											"end": 500,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 385,
											"end": 500,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 385,
											"end": 500,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 385,
											"end": 500,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 385,
											"end": 500,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 385,
											"end": 500,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 385,
											"end": 500,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 385,
											"end": 500,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 385,
											"end": 500,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 187,
											"end": 221,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 540,
											"end": 847,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 540,
											"end": 847,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 540,
											"end": 847,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 540,
											"end": 847,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 540,
											"end": 847,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 540,
											"end": 847,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 540,
											"end": 847,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 540,
											"end": 847,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 540,
											"end": 847,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 540,
											"end": 847,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 385,
											"end": 500,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 385,
											"end": 500,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 448,
											"end": 455,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 474,
											"end": 493,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 474,
											"end": 493,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 474,
											"end": 493,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 474,
											"end": 493,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 474,
											"end": 493,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 474,
											"end": 493,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 474,
											"end": 493,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 474,
											"end": 493,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 474,
											"end": 493,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 474,
											"end": 493,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 474,
											"end": 493,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 467,
											"end": 493,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 467,
											"end": 493,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 385,
											"end": 500,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 187,
											"end": 221,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 187,
											"end": 221,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "PUSH",
											"source": 2,
											"value": "FFFF"
										},
										{
											"begin": 156,
											"end": 181,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 156,
											"end": 181,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 284,
											"end": 379,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 342,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 361,
											"end": 372,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 361,
											"end": 372,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 361,
											"end": 372,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 361,
											"end": 372,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 361,
											"end": 372,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 361,
											"end": 372,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 361,
											"end": 372,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 361,
											"end": 372,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 361,
											"end": 372,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 361,
											"end": 372,
											"name": "PUSH",
											"source": 2,
											"value": "FFFF"
										},
										{
											"begin": 361,
											"end": 372,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 354,
											"end": 372,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 354,
											"end": 372,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 284,
											"end": 379,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 540,
											"end": 847,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 540,
											"end": 847,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 636,
											"end": 646,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 614,
											"end": 633,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 614,
											"end": 633,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 614,
											"end": 646,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 614,
											"end": 646,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 614,
											"end": 646,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 614,
											"end": 646,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 614,
											"end": 646,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 709,
											"end": 720,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 709,
											"end": 720,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 709,
											"end": 720,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 709,
											"end": 720,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 709,
											"end": 720,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 709,
											"end": 720,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 709,
											"end": 720,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 709,
											"end": 720,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 709,
											"end": 720,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 709,
											"end": 720,
											"name": "PUSH",
											"source": 2,
											"value": "FFFF"
										},
										{
											"begin": 709,
											"end": 720,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 699,
											"end": 720,
											"name": "PUSH",
											"source": 2,
											"value": "FFFF"
										},
										{
											"begin": 699,
											"end": 720,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 699,
											"end": 705,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 699,
											"end": 720,
											"name": "PUSH",
											"source": 2,
											"value": "FFFF"
										},
										{
											"begin": 699,
											"end": 720,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 699,
											"end": 720,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 695,
											"end": 729,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 695,
											"end": 729,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 695,
											"end": 729,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 722,
											"end": 729,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 722,
											"end": 729,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 695,
											"end": 729,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 695,
											"end": 729,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 739,
											"end": 752,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 755,
											"end": 766,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 755,
											"end": 766,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 755,
											"end": 766,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 755,
											"end": 766,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 755,
											"end": 766,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 755,
											"end": 766,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 755,
											"end": 766,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 755,
											"end": 766,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 755,
											"end": 766,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 755,
											"end": 766,
											"name": "PUSH",
											"source": 2,
											"value": "FFFF"
										},
										{
											"begin": 755,
											"end": 766,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 739,
											"end": 766,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 739,
											"end": 766,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 790,
											"end": 796,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 776,
											"end": 787,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 776,
											"end": 796,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 776,
											"end": 796,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "PUSH",
											"source": 2,
											"value": "FFFF"
										},
										{
											"begin": 776,
											"end": 796,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "PUSH",
											"source": 2,
											"value": "FFFF"
										},
										{
											"begin": 776,
											"end": 796,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 776,
											"end": 796,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 811,
											"end": 840,
											"name": "PUSH",
											"source": 2,
											"value": "42844807F1F2D558D424268B6755D861B25ADA531856444CCD87F17E2C4273F7"
										},
										{
											"begin": 825,
											"end": 831,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 833,
											"end": 839,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 811,
											"end": 840,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 811,
											"end": 840,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 811,
											"end": 840,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 811,
											"end": 840,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 811,
											"end": 840,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 811,
											"end": 840,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 811,
											"end": 840,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 811,
											"end": 840,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 811,
											"end": 840,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 811,
											"end": 840,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 811,
											"end": 840,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 811,
											"end": 840,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 811,
											"end": 840,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 811,
											"end": 840,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 811,
											"end": 840,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 811,
											"end": 840,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 811,
											"end": 840,
											"name": "LOG1",
											"source": 2
										},
										{
											"begin": 1117,
											"end": 1118,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 1118,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1117,
											"end": 1118,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 540,
											"end": 847,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 540,
											"end": 847,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2189,
											"end": 2190,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2177,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2263,
											"end": 2271,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1433,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1422,
											"end": 1427,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2531,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2547,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2541,
											"end": 2547,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2604,
											"end": 2612,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2594,
											"end": 2602,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7,
											"end": 146,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 59,
											"end": 146,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 59,
											"end": 146,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 59,
											"end": 146,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 59,
											"end": 146,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 59,
											"end": 146,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 289,
											"name": "tag",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 152,
											"end": 289,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 152,
											"end": 289,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 235,
											"end": 241,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 222,
											"end": 242,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 213,
											"end": 242,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 213,
											"end": 242,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 251,
											"end": 283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 277,
											"end": 282,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 251,
											"end": 283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 251,
											"end": 283,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 251,
											"end": 283,
											"name": "tag",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 251,
											"end": 283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 203,
											"end": 289,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 203,
											"end": 289,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 203,
											"end": 289,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 203,
											"end": 289,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 203,
											"end": 289,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 295,
											"end": 557,
											"name": "tag",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 295,
											"end": 557,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 295,
											"end": 557,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 403,
											"end": 405,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 391,
											"end": 400,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 382,
											"end": 389,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 378,
											"end": 401,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 374,
											"end": 406,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 371,
											"end": 373,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 371,
											"end": 373,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 371,
											"end": 373,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 419,
											"end": 420,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 416,
											"end": 417,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 409,
											"end": 421,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 371,
											"end": 373,
											"name": "tag",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 371,
											"end": 373,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 462,
											"end": 463,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 487,
											"end": 540,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 532,
											"end": 539,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 523,
											"end": 529,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 512,
											"end": 521,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 508,
											"end": 530,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 487,
											"end": 540,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 487,
											"end": 540,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 487,
											"end": 540,
											"name": "tag",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 487,
											"end": 540,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 477,
											"end": 540,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 477,
											"end": 540,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 433,
											"end": 550,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 361,
											"end": 557,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 361,
											"end": 557,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 361,
											"end": 557,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 361,
											"end": 557,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 361,
											"end": 557,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 563,
											"end": 823,
											"name": "tag",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 563,
											"end": 823,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 563,
											"end": 823,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 670,
											"end": 672,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 658,
											"end": 667,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 649,
											"end": 656,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 645,
											"end": 668,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 641,
											"end": 673,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 638,
											"end": 640,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 638,
											"end": 640,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 638,
											"end": 640,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 686,
											"end": 687,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 683,
											"end": 684,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 676,
											"end": 688,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 638,
											"end": 640,
											"name": "tag",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 638,
											"end": 640,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 729,
											"end": 730,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 754,
											"end": 806,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 798,
											"end": 805,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 789,
											"end": 795,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 778,
											"end": 787,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 774,
											"end": 796,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 754,
											"end": 806,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 754,
											"end": 806,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 754,
											"end": 806,
											"name": "tag",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 754,
											"end": 806,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 744,
											"end": 806,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 744,
											"end": 806,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 700,
											"end": 816,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 628,
											"end": 823,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 628,
											"end": 823,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 628,
											"end": 823,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 628,
											"end": 823,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 628,
											"end": 823,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 829,
											"end": 947,
											"name": "tag",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 829,
											"end": 947,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 916,
											"end": 940,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "87"
										},
										{
											"begin": 934,
											"end": 939,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 916,
											"end": 940,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "88"
										},
										{
											"begin": 916,
											"end": 940,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 916,
											"end": 940,
											"name": "tag",
											"source": 3,
											"value": "87"
										},
										{
											"begin": 916,
											"end": 940,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 911,
											"end": 914,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 904,
											"end": 941,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 894,
											"end": 947,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 894,
											"end": 947,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 894,
											"end": 947,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 953,
											"end": 1319,
											"name": "tag",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 953,
											"end": 1319,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 953,
											"end": 1319,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 1183,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 1180,
											"end": 1182,
											"name": "PUSH",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1175,
											"end": 1178,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1116,
											"end": 1183,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 1116,
											"end": 1183,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1116,
											"end": 1183,
											"name": "tag",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 1116,
											"end": 1183,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1109,
											"end": 1183,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1109,
											"end": 1183,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1192,
											"end": 1285,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "93"
										},
										{
											"begin": 1281,
											"end": 1284,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1192,
											"end": 1285,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 1192,
											"end": 1285,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1192,
											"end": 1285,
											"name": "tag",
											"source": 3,
											"value": "93"
										},
										{
											"begin": 1192,
											"end": 1285,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1310,
											"end": 1312,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1305,
											"end": 1308,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1301,
											"end": 1313,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1294,
											"end": 1313,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1294,
											"end": 1313,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1099,
											"end": 1319,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1099,
											"end": 1319,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1099,
											"end": 1319,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1099,
											"end": 1319,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1325,
											"end": 1691,
											"name": "tag",
											"source": 3,
											"value": "95"
										},
										{
											"begin": 1325,
											"end": 1691,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1325,
											"end": 1691,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1488,
											"end": 1555,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 1552,
											"end": 1554,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1547,
											"end": 1550,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1488,
											"end": 1555,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 1488,
											"end": 1555,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1488,
											"end": 1555,
											"name": "tag",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 1488,
											"end": 1555,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1481,
											"end": 1555,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1481,
											"end": 1555,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1564,
											"end": 1657,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 1653,
											"end": 1656,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1564,
											"end": 1657,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 1564,
											"end": 1657,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1564,
											"end": 1657,
											"name": "tag",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 1564,
											"end": 1657,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1682,
											"end": 1684,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1677,
											"end": 1680,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1673,
											"end": 1685,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1666,
											"end": 1685,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1666,
											"end": 1685,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1471,
											"end": 1691,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1471,
											"end": 1691,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1471,
											"end": 1691,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1471,
											"end": 1691,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1697,
											"end": 1812,
											"name": "tag",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 1697,
											"end": 1812,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1782,
											"end": 1805,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 1799,
											"end": 1804,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1782,
											"end": 1805,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 1782,
											"end": 1805,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1782,
											"end": 1805,
											"name": "tag",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 1782,
											"end": 1805,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1777,
											"end": 1780,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1770,
											"end": 1806,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1760,
											"end": 1812,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1760,
											"end": 1812,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1760,
											"end": 1812,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1818,
											"end": 2040,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 1818,
											"end": 2040,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1818,
											"end": 2040,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1949,
											"end": 1951,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1938,
											"end": 1947,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1934,
											"end": 1952,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1926,
											"end": 1952,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1926,
											"end": 1952,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1962,
											"end": 2033,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 2030,
											"end": 2031,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2019,
											"end": 2028,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2015,
											"end": 2032,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2006,
											"end": 2012,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1962,
											"end": 2033,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 1962,
											"end": 2033,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1962,
											"end": 2033,
											"name": "tag",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 1962,
											"end": 2033,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1916,
											"end": 2040,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1916,
											"end": 2040,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1916,
											"end": 2040,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1916,
											"end": 2040,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1916,
											"end": 2040,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2046,
											"end": 2465,
											"name": "tag",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 2046,
											"end": 2465,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2046,
											"end": 2465,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2250,
											"end": 2252,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2239,
											"end": 2248,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2235,
											"end": 2253,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2227,
											"end": 2253,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2227,
											"end": 2253,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2299,
											"end": 2308,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2293,
											"end": 2297,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2289,
											"end": 2309,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2285,
											"end": 2286,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2274,
											"end": 2283,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2270,
											"end": 2287,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2263,
											"end": 2310,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2327,
											"end": 2458,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 2453,
											"end": 2457,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2327,
											"end": 2458,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 2327,
											"end": 2458,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2327,
											"end": 2458,
											"name": "tag",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 2327,
											"end": 2458,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2319,
											"end": 2458,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2319,
											"end": 2458,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2217,
											"end": 2465,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2217,
											"end": 2465,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2217,
											"end": 2465,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2217,
											"end": 2465,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2471,
											"end": 2890,
											"name": "tag",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 2471,
											"end": 2890,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2471,
											"end": 2890,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2675,
											"end": 2677,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2664,
											"end": 2673,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2660,
											"end": 2678,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2652,
											"end": 2678,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2652,
											"end": 2678,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2724,
											"end": 2733,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2718,
											"end": 2722,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2714,
											"end": 2734,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2710,
											"end": 2711,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2699,
											"end": 2708,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2695,
											"end": 2712,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2688,
											"end": 2735,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2752,
											"end": 2883,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 2878,
											"end": 2882,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2752,
											"end": 2883,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "95"
										},
										{
											"begin": 2752,
											"end": 2883,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2752,
											"end": 2883,
											"name": "tag",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 2752,
											"end": 2883,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2744,
											"end": 2883,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2744,
											"end": 2883,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2642,
											"end": 2890,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2642,
											"end": 2890,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2642,
											"end": 2890,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2642,
											"end": 2890,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2896,
											"end": 3114,
											"name": "tag",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 2896,
											"end": 3114,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2896,
											"end": 3114,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3025,
											"end": 3027,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3014,
											"end": 3023,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3010,
											"end": 3028,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3028,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3028,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3038,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "111"
										},
										{
											"begin": 3104,
											"end": 3105,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3093,
											"end": 3102,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3089,
											"end": 3106,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3080,
											"end": 3086,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3038,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 3038,
											"end": 3107,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3038,
											"end": 3107,
											"name": "tag",
											"source": 3,
											"value": "111"
										},
										{
											"begin": 3038,
											"end": 3107,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2992,
											"end": 3114,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2992,
											"end": 3114,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2992,
											"end": 3114,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2992,
											"end": 3114,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2992,
											"end": 3114,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3120,
											"end": 3444,
											"name": "tag",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 3120,
											"end": 3444,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3120,
											"end": 3444,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3275,
											"end": 3277,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3264,
											"end": 3273,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3260,
											"end": 3278,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3252,
											"end": 3278,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3252,
											"end": 3278,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3288,
											"end": 3357,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "113"
										},
										{
											"begin": 3354,
											"end": 3355,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3343,
											"end": 3352,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3339,
											"end": 3356,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3330,
											"end": 3336,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3288,
											"end": 3357,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 3288,
											"end": 3357,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3288,
											"end": 3357,
											"name": "tag",
											"source": 3,
											"value": "113"
										},
										{
											"begin": 3288,
											"end": 3357,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3367,
											"end": 3437,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 3433,
											"end": 3435,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3422,
											"end": 3431,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3418,
											"end": 3436,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3409,
											"end": 3415,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3367,
											"end": 3437,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 3367,
											"end": 3437,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3367,
											"end": 3437,
											"name": "tag",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 3367,
											"end": 3437,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3242,
											"end": 3444,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 3242,
											"end": 3444,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3242,
											"end": 3444,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3242,
											"end": 3444,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3242,
											"end": 3444,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3242,
											"end": 3444,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3450,
											"end": 3619,
											"name": "tag",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 3450,
											"end": 3619,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3450,
											"end": 3619,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3568,
											"end": 3574,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3563,
											"end": 3566,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3556,
											"end": 3575,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3608,
											"end": 3612,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3603,
											"end": 3606,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3599,
											"end": 3613,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3584,
											"end": 3613,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3584,
											"end": 3613,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3546,
											"end": 3619,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3546,
											"end": 3619,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3546,
											"end": 3619,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3546,
											"end": 3619,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3546,
											"end": 3619,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3625,
											"end": 3721,
											"name": "tag",
											"source": 3,
											"value": "88"
										},
										{
											"begin": 3625,
											"end": 3721,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3625,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "117"
										},
										{
											"begin": 3709,
											"end": 3714,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "118"
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "tag",
											"source": 3,
											"value": "117"
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3680,
											"end": 3715,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3680,
											"end": 3715,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3670,
											"end": 3721,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3670,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3670,
											"end": 3721,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3670,
											"end": 3721,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3727,
											"end": 3816,
											"name": "tag",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 3727,
											"end": 3816,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3727,
											"end": 3816,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3803,
											"end": 3809,
											"name": "PUSH",
											"source": 3,
											"value": "FFFF"
										},
										{
											"begin": 3796,
											"end": 3801,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3792,
											"end": 3810,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3781,
											"end": 3810,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3781,
											"end": 3810,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3771,
											"end": 3816,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3771,
											"end": 3816,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3771,
											"end": 3816,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3771,
											"end": 3816,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3822,
											"end": 3948,
											"name": "tag",
											"source": 3,
											"value": "118"
										},
										{
											"begin": 3822,
											"end": 3948,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3822,
											"end": 3948,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3899,
											"end": 3941,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3892,
											"end": 3897,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3888,
											"end": 3942,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3942,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3942,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3867,
											"end": 3948,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3867,
											"end": 3948,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3867,
											"end": 3948,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3867,
											"end": 3948,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3954,
											"end": 4179,
											"name": "tag",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 3954,
											"end": 4179,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4094,
											"end": 4128,
											"name": "PUSH",
											"source": 3,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 4090,
											"end": 4091,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4082,
											"end": 4088,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4078,
											"end": 4092,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4071,
											"end": 4129,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4163,
											"end": 4171,
											"name": "PUSH",
											"source": 3,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4158,
											"end": 4160,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4150,
											"end": 4156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4146,
											"end": 4161,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4139,
											"end": 4172,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4060,
											"end": 4179,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4060,
											"end": 4179,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4185,
											"end": 4367,
											"name": "tag",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 4185,
											"end": 4367,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4325,
											"end": 4359,
											"name": "PUSH",
											"source": 3,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 4321,
											"end": 4322,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4313,
											"end": 4319,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4309,
											"end": 4323,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4302,
											"end": 4360,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4291,
											"end": 4367,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4291,
											"end": 4367,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4373,
											"end": 4495,
											"name": "tag",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 4373,
											"end": 4495,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4446,
											"end": 4470,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "124"
										},
										{
											"begin": 4464,
											"end": 4469,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4446,
											"end": 4470,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "88"
										},
										{
											"begin": 4446,
											"end": 4470,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4446,
											"end": 4470,
											"name": "tag",
											"source": 3,
											"value": "124"
										},
										{
											"begin": 4446,
											"end": 4470,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4439,
											"end": 4444,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4436,
											"end": 4471,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 4426,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 4426,
											"end": 4428,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4485,
											"end": 4486,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4482,
											"end": 4483,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4475,
											"end": 4487,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4426,
											"end": 4428,
											"name": "tag",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 4426,
											"end": 4428,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4416,
											"end": 4495,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4416,
											"end": 4495,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4501,
											"end": 4621,
											"name": "tag",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 4501,
											"end": 4621,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4573,
											"end": 4596,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 4590,
											"end": 4595,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4573,
											"end": 4596,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 4573,
											"end": 4596,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4573,
											"end": 4596,
											"name": "tag",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 4573,
											"end": 4596,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4566,
											"end": 4571,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4563,
											"end": 4597,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 4553,
											"end": 4555,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 4553,
											"end": 4555,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4611,
											"end": 4612,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4608,
											"end": 4609,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4601,
											"end": 4613,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4553,
											"end": 4555,
											"name": "tag",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 4553,
											"end": 4555,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4543,
											"end": 4621,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4543,
											"end": 4621,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"AconomyOwnerAddress()": "951f9c5b",
							"_AconomyFee()": "9a3d4ae6",
							"getAconomyOwnerAddress()": "4dd9ccb1",
							"owner()": "8da5cb5b",
							"protocolFee()": "b0e21e8a",
							"renounceOwnership()": "715018a6",
							"setProtocolFee(uint16)": "e4467f35",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldFee\",\"type\":\"uint16\"}],\"name\":\"SetAconomyFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AconomyOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_AconomyFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAconomyOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AconomyFee.sol\":\"AconomyFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/AconomyFee.sol\":{\"keccak256\":\"0x87c1cafa2624bec45664a90ce5519beb20d2e84de69d0437d2bac38c86ccbea9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://300faca58a32aa675056b835ce83d815732f02d71b8351994bf72187c5ac4440\",\"dweb:/ipfs/QmZJ7AxzhkkhNhX9bwN7avvKCgsFiTney2vCWikyC2usWo\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/AconomyFee.sol:AconomyFee",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 141,
								"contract": "contracts/AconomyFee.sol:AconomyFee",
								"label": "_AconomyFee",
								"offset": 20,
								"slot": "0",
								"type": "t_uint16"
							},
							{
								"astId": 143,
								"contract": "contracts/AconomyFee.sol:AconomyFee",
								"label": "AconomyOwnerAddress",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_uint16": {
								"encoding": "inplace",
								"label": "uint16",
								"numberOfBytes": "2"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							134
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 135,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 134,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"contractDependencies": [
								134
							],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								134
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 124,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 124,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0"
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							134
						]
					},
					"id": 135,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:1",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 134,
							"linearizedBaseContracts": [
								134
							],
							"name": "Context",
							"nameLocation": "626:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 123,
										"nodeType": "Block",
										"src": "702:34:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 120,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 119,
												"id": 122,
												"nodeType": "Return",
												"src": "712:17:1"
											}
										]
									},
									"id": 124,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:1"
									},
									"returnParameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "693:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:1"
									},
									"scope": 134,
									"src": "640:96:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 132,
										"nodeType": "Block",
										"src": "809:32:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 129,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 128,
												"id": 131,
												"nodeType": "Return",
												"src": "819:15:1"
											}
										]
									},
									"id": 133,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:1"
									},
									"returnParameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "793:14:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 126,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:1"
									},
									"scope": 134,
									"src": "742:99:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 135,
							"src": "608:235:1"
						}
					],
					"src": "86:758:1"
				},
				"id": 1
			},
			"contracts/AconomyFee.sol": {
				"ast": {
					"absolutePath": "contracts/AconomyFee.sol",
					"exportedSymbols": {
						"AconomyFee": [
							197
						],
						"Context": [
							134
						],
						"Ownable": [
							112
						]
					},
					"id": 198,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 136,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:31:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 137,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 198,
							"sourceUnit": 113,
							"src": "65:52:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 138,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "142:7:2"
									},
									"id": 139,
									"nodeType": "InheritanceSpecifier",
									"src": "142:7:2"
								}
							],
							"contractDependencies": [
								112,
								134
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 197,
							"linearizedBaseContracts": [
								197,
								112,
								134
							],
							"name": "AconomyFee",
							"nameLocation": "128:10:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "9a3d4ae6",
									"id": 141,
									"mutability": "mutable",
									"name": "_AconomyFee",
									"nameLocation": "170:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 197,
									"src": "156:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint16",
										"typeString": "uint16"
									},
									"typeName": {
										"id": 140,
										"name": "uint16",
										"nodeType": "ElementaryTypeName",
										"src": "156:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint16",
											"typeString": "uint16"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "951f9c5b",
									"id": 143,
									"mutability": "mutable",
									"name": "AconomyOwnerAddress",
									"nameLocation": "202:19:2",
									"nodeType": "VariableDeclaration",
									"scope": 197,
									"src": "187:34:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 142,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "187:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"id": 149,
									"name": "SetAconomyFee",
									"nameLocation": "234:13:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"indexed": false,
												"mutability": "mutable",
												"name": "newFee",
												"nameLocation": "255:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "248:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 144,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "248:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 147,
												"indexed": false,
												"mutability": "mutable",
												"name": "oldFee",
												"nameLocation": "270:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "263:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 146,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "263:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "247:30:2"
									},
									"src": "228:50:2"
								},
								{
									"body": {
										"id": 156,
										"nodeType": "Block",
										"src": "344:35:2",
										"statements": [
											{
												"expression": {
													"id": 154,
													"name": "_AconomyFee",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 141,
													"src": "361:11:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"functionReturnParameters": 153,
												"id": 155,
												"nodeType": "Return",
												"src": "354:18:2"
											}
										]
									},
									"functionSelector": "b0e21e8a",
									"id": 157,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "protocolFee",
									"nameLocation": "293:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "304:2:2"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "336:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 151,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "336:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "335:8:2"
									},
									"scope": 197,
									"src": "284:95:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "457:43:2",
										"statements": [
											{
												"expression": {
													"id": 162,
													"name": "AconomyOwnerAddress",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 143,
													"src": "474:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 161,
												"id": 163,
												"nodeType": "Return",
												"src": "467:26:2"
											}
										]
									},
									"functionSelector": "4dd9ccb1",
									"id": 165,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAconomyOwnerAddress",
									"nameLocation": "394:22:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "416:2:2"
									},
									"returnParameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "448:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "447:9:2"
									},
									"scope": 197,
									"src": "385:115:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 195,
										"nodeType": "Block",
										"src": "604:243:2",
										"statements": [
											{
												"expression": {
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 172,
														"name": "AconomyOwnerAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 143,
														"src": "614:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 173,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "636:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 174,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "636:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "614:32:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 176,
												"nodeType": "ExpressionStatement",
												"src": "614:32:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													},
													"id": 179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 177,
														"name": "newFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 167,
														"src": "699:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 178,
														"name": "_AconomyFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "709:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"src": "699:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 181,
												"nodeType": "IfStatement",
												"src": "695:34:2",
												"trueBody": {
													"functionReturnParameters": 171,
													"id": 180,
													"nodeType": "Return",
													"src": "722:7:2"
												}
											},
											{
												"assignments": [
													183
												],
												"declarations": [
													{
														"constant": false,
														"id": 183,
														"mutability": "mutable",
														"name": "oldFee",
														"nameLocation": "746:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 195,
														"src": "739:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"typeName": {
															"id": 182,
															"name": "uint16",
															"nodeType": "ElementaryTypeName",
															"src": "739:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 185,
												"initialValue": {
													"id": 184,
													"name": "_AconomyFee",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 141,
													"src": "755:11:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "739:27:2"
											},
											{
												"expression": {
													"id": 188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 186,
														"name": "_AconomyFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "776:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 187,
														"name": "newFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 167,
														"src": "790:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"src": "776:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"id": 189,
												"nodeType": "ExpressionStatement",
												"src": "776:20:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 191,
															"name": "newFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 167,
															"src": "825:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														{
															"id": 192,
															"name": "oldFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 183,
															"src": "833:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														],
														"id": 190,
														"name": "SetAconomyFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 149,
														"src": "811:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint16_$_t_uint16_$returns$__$",
															"typeString": "function (uint16,uint16)"
														}
													},
													"id": 193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "811:29:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 194,
												"nodeType": "EmitStatement",
												"src": "806:34:2"
											}
										]
									},
									"functionSelector": "e4467f35",
									"id": 196,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 170,
											"modifierName": {
												"id": 169,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "594:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "594:9:2"
										}
									],
									"name": "setProtocolFee",
									"nameLocation": "549:14:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "newFee",
												"nameLocation": "571:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 196,
												"src": "564:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 166,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "564:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "563:15:2"
									},
									"returnParameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "604:0:2"
									},
									"scope": 197,
									"src": "540:307:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 198,
							"src": "119:730:2"
						}
					],
					"src": "0:943:2"
				},
				"id": 2
			}
		}
	}
}